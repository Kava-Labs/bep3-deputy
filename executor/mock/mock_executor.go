// Code generated by MockGen. DO NOT EDIT.
// Source: common/executor.go

// Package mock is a generated GoMock package.
package mock

import (
	common "github.com/binance-chain/bep3-deputy/common"
	store "github.com/binance-chain/bep3-deputy/store"
	common0 "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
	time "time"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// GetChain mocks base method
func (m *MockExecutor) GetChain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChain")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChain indicates an expected call of GetChain
func (mr *MockExecutorMockRecorder) GetChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChain", reflect.TypeOf((*MockExecutor)(nil).GetChain))
}

// GetHeight mocks base method
func (m *MockExecutor) GetHeight() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight
func (mr *MockExecutorMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockExecutor)(nil).GetHeight))
}

// GetBlockAndTxs mocks base method
func (m *MockExecutor) GetBlockAndTxs(height int64) (*common.BlockAndTxLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockAndTxs", height)
	ret0, _ := ret[0].(*common.BlockAndTxLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockAndTxs indicates an expected call of GetBlockAndTxs
func (mr *MockExecutorMockRecorder) GetBlockAndTxs(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockAndTxs", reflect.TypeOf((*MockExecutor)(nil).GetBlockAndTxs), height)
}

// GetFetchInterval mocks base method
func (m *MockExecutor) GetFetchInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFetchInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetFetchInterval indicates an expected call of GetFetchInterval
func (mr *MockExecutorMockRecorder) GetFetchInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFetchInterval", reflect.TypeOf((*MockExecutor)(nil).GetFetchInterval))
}

// GetDeputyAddress mocks base method
func (m *MockExecutor) GetDeputyAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeputyAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeputyAddress indicates an expected call of GetDeputyAddress
func (mr *MockExecutorMockRecorder) GetDeputyAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeputyAddress", reflect.TypeOf((*MockExecutor)(nil).GetDeputyAddress))
}

// GetSentTxStatus mocks base method
func (m *MockExecutor) GetSentTxStatus(hash string) store.TxStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTxStatus", hash)
	ret0, _ := ret[0].(store.TxStatus)
	return ret0
}

// GetSentTxStatus indicates an expected call of GetSentTxStatus
func (mr *MockExecutorMockRecorder) GetSentTxStatus(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTxStatus", reflect.TypeOf((*MockExecutor)(nil).GetSentTxStatus), hash)
}

// GetBalance mocks base method
func (m *MockExecutor) GetBalance() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockExecutorMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockExecutor)(nil).GetBalance))
}

// GetStatus mocks base method
func (m *MockExecutor) GetStatus() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockExecutorMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockExecutor)(nil).GetStatus))
}

// GetBalanceAlertMsg mocks base method
func (m *MockExecutor) GetBalanceAlertMsg() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceAlertMsg")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceAlertMsg indicates an expected call of GetBalanceAlertMsg
func (mr *MockExecutorMockRecorder) GetBalanceAlertMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceAlertMsg", reflect.TypeOf((*MockExecutor)(nil).GetBalanceAlertMsg))
}

// IsSameAddress mocks base method
func (m *MockExecutor) IsSameAddress(addrA, addrB string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSameAddress", addrA, addrB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSameAddress indicates an expected call of IsSameAddress
func (mr *MockExecutorMockRecorder) IsSameAddress(addrA, addrB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSameAddress", reflect.TypeOf((*MockExecutor)(nil).IsSameAddress), addrA, addrB)
}

// CalcSwapId mocks base method
func (m *MockExecutor) CalcSwapId(randomNumberHash common0.Hash, sender, senderOtherChain string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcSwapId", randomNumberHash, sender, senderOtherChain)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcSwapId indicates an expected call of CalcSwapId
func (mr *MockExecutorMockRecorder) CalcSwapId(randomNumberHash, sender, senderOtherChain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcSwapId", reflect.TypeOf((*MockExecutor)(nil).CalcSwapId), randomNumberHash, sender, senderOtherChain)
}

// Claimable mocks base method
func (m *MockExecutor) Claimable(swapId common0.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claimable", swapId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claimable indicates an expected call of Claimable
func (mr *MockExecutorMockRecorder) Claimable(swapId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claimable", reflect.TypeOf((*MockExecutor)(nil).Claimable), swapId)
}

// Refundable mocks base method
func (m *MockExecutor) Refundable(swapId common0.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refundable", swapId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refundable indicates an expected call of Refundable
func (mr *MockExecutorMockRecorder) Refundable(swapId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refundable", reflect.TypeOf((*MockExecutor)(nil).Refundable), swapId)
}

// GetSwap mocks base method
func (m *MockExecutor) GetSwap(swapId common0.Hash) (*common.SwapRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwap", swapId)
	ret0, _ := ret[0].(*common.SwapRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwap indicates an expected call of GetSwap
func (mr *MockExecutorMockRecorder) GetSwap(swapId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwap", reflect.TypeOf((*MockExecutor)(nil).GetSwap), swapId)
}

// HasSwap mocks base method
func (m *MockExecutor) HasSwap(swapId common0.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSwap", swapId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSwap indicates an expected call of HasSwap
func (mr *MockExecutorMockRecorder) HasSwap(swapId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSwap", reflect.TypeOf((*MockExecutor)(nil).HasSwap), swapId)
}

// HTLT mocks base method
func (m *MockExecutor) HTLT(randomNumberHash common0.Hash, timestamp, heightSpan int64, recipientAddr, otherChainSenderAddr, otherChainRecipientAddr string, outAmount *big.Int) (string, *common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTLT", randomNumberHash, timestamp, heightSpan, recipientAddr, otherChainSenderAddr, otherChainRecipientAddr, outAmount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*common.Error)
	return ret0, ret1
}

// HTLT indicates an expected call of HTLT
func (mr *MockExecutorMockRecorder) HTLT(randomNumberHash, timestamp, heightSpan, recipientAddr, otherChainSenderAddr, otherChainRecipientAddr, outAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTLT", reflect.TypeOf((*MockExecutor)(nil).HTLT), randomNumberHash, timestamp, heightSpan, recipientAddr, otherChainSenderAddr, otherChainRecipientAddr, outAmount)
}

// Claim mocks base method
func (m *MockExecutor) Claim(swapId, randomNumber common0.Hash) (string, *common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", swapId, randomNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*common.Error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim
func (mr *MockExecutorMockRecorder) Claim(swapId, randomNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockExecutor)(nil).Claim), swapId, randomNumber)
}

// Refund mocks base method
func (m *MockExecutor) Refund(swapId common0.Hash) (string, *common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", swapId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*common.Error)
	return ret0, ret1
}

// Refund indicates an expected call of Refund
func (mr *MockExecutorMockRecorder) Refund(swapId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockExecutor)(nil).Refund), swapId)
}

// SendAmount mocks base method
func (m *MockExecutor) SendAmount(address string, amount *big.Int, symbol string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAmount", address, amount, symbol)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAmount indicates an expected call of SendAmount
func (mr *MockExecutorMockRecorder) SendAmount(address, amount, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAmount", reflect.TypeOf((*MockExecutor)(nil).SendAmount), address, amount, symbol)
}
